const MULTILINE = [
  'multiline-block-like',
  'multiline-const',
  'multiline-expression',
];

// TODO: categorize
module.exports = {
  rules: {
    'array-bracket-spacing': 2,
    'arrow-body-style': ['error', 'as-needed'],
    'arrow-parens': ['error', 'as-needed'],
    'arrow-spacing': 2,
    'brace-style': 2,
    camelcase: 1,
    'comma-dangle': [2, 'always-multiline'],
    'comma-spacing': [2, { after: true, before: false }],
    'comma-style': [2, 'last'],
    'consistent-return': 2,
    'constructor-super': 2,
    curly: [2, 'all'],
    'default-case': 0,
    'dot-notation': 2,
    'eol-last': 2,
    eqeqeq: 2,
    'func-call-spacing': 2,
    'func-style': [1, 'declaration', { allowArrowFunctions: true }],

    indent: 0,

    'key-spacing': 2,
    'keyword-spacing': 2,
    'lines-between-class-members': ['error', 'always'],
    'max-len': ['error', 400, 2],
    'max-lines': [2, { max: 1000 }],
    'max-params': [2, { max: 3 }],
    'new-cap': 2,
    'new-parens': 2,

    'object-curly-spacing': [2, 'always'],
    'object-shorthand': 2,
    'padded-blocks': [2, 'never'],
    'padding-line-between-statements': [
      'error',
      {
        blankLine: 'always',
        next: ['class', 'const', 'function', 'let', 'return'],
        prev: '*',
      },
      { blankLine: 'always', next: '*', prev: ['class', 'const', 'let'] },
      { blankLine: 'any', next: 'const', prev: 'const' },
      { blankLine: 'any', next: 'let', prev: 'let' },
      { blankLine: 'always', next: 'function', prev: MULTILINE },
      { blankLine: 'always', next: MULTILINE, prev: MULTILINE },
      { blankLine: 'always', next: 'block-like', prev: 'block-like' },
      { blankLine: 'always', next: '*', prev: MULTILINE },
      { blankLine: 'always', next: MULTILINE, prev: '*' },
      { blankLine: 'never', next: ['case', 'default'], prev: '*' },
    ],

    'require-await': 2,
    'rest-spread-spacing': 2,
    semi: [2, 'always'],
    'space-before-blocks': 2,
    'space-before-function-paren': [2, { anonymous: 'always', named: 'never' }],
    'space-in-parens': [2, 'never'],
    'space-unary-ops': [1, { nonwords: false, words: true }],
    'spaced-comment': [2, 'always', { exceptions: ['-'] }],
    strict: 2,
    'template-curly-spacing': 2,
    'valid-jsdoc': [1, { prefer: { return: 'returns' } }],
    'wrap-iife': 2,
  },
};
